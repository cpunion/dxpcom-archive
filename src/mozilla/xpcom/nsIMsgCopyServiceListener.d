/*
 * DO NOT EDIT.  THIS FILE IS GENERATED FROM nsIMsgCopyServiceListener.idl
 */

module mozilla.xpcom.nsIMsgCopyServiceListener;


public import mozilla.xpcom.nsrootidl;

public import mozilla.xpcom.nsrootidl;
public import mozilla.xpcom.nsISupports;


/* starting interface:    nsIMsgCopyServiceListener */
const char[] NS_IMSGCOPYSERVICELISTENER_IID_STR = "1caa10b6-29a6-11d3-afb2-001083002da8";

const nsIID NS_IMSGCOPYSERVICELISTENER_IID= 
  {0x1caa10b6, 0x29a6, 0x11d3, 
    [ 0xaf, 0xb2, 0x00, 0x10, 0x83, 0x00, 0x2d, 0xa8 ]};

extern(Windows)
interface nsIMsgCopyServiceListener : nsISupports {
  static const char[] IID_STR = NS_IMSGCOPYSERVICELISTENER_IID_STR;
  static const nsIID IID = NS_IMSGCOPYSERVICELISTENER_IID;

  /**
     * Notify the observer that the message has started to be copied. This
     * method is called only once, at the beginning of a message
     * copyoperation. 
     */
  /* void OnStartCopy (); */
  nsresult OnStartCopy();

  /**
     * Notify the observer that progress as occurred for the message copy
     * aProgress -
     * aProgressMax -
     */
  /* void OnProgress (in PRUint32 aProgress, in PRUint32 aProgressMax); */
  nsresult OnProgress(PRUint32 aProgress, PRUint32 aProgressMax);

  /**
     * Setting newly created message key. This method is taylored specifically
     * for nsIMsgCopyService::CopyFileMessage() when saveing Drafts/Templates.
     * We need to have a way to inform the client what's the key of the newly
     * created message.
     * aKey -
     */
  /* void SetMessageKey (in PRUint32 aKey); */
  nsresult SetMessageKey(PRUint32 aKey);

  /**
     * Getting the file message message ID. This method is taylored
     * specifically for nsIMsgCopyService::CopyFileMessage() when saving
     * Drafts/Templates. In order to work with imap server which doesn't
     * support uidplus we have to use search comman to retrieve the key of
     * newly created message. Message ID generated by the compose gurantee its
     * uniqueness.
     * aMessageId -
     */
  /* [noscript] void GetMessageId (in nsCString aMessageId); */
  nsresult GetMessageId(nsCString * aMessageId);

  /**
     * Notify the observer that the message copied operation has completed.  
     * This method is called regardless of whether the the operation was
     * successful.
     * aStatus - indicate whether the operation was succeeded
     */
  /* void OnStopCopy (in nsresult aStatus); */
  nsresult OnStopCopy(nsresult aStatus);

}

