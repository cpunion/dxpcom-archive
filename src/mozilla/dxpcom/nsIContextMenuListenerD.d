/*
 * DO NOT EDIT.  THIS FILE IS GENERATED FROM nsIContextMenuListener.idl
 */

module mozilla.dxpcom.nsIContextMenuListenerD;

public import mozilla.dxpcom.nsrootidlD;


public import mozilla.xpcom.nsIContextMenuListener;


public import mozilla.dxpcom.nsIContextMenuListenerD;

public import mozilla.xpcom.nsISupports;
public import mozilla.dxpcom.nsISupportsD;

public import mozilla.xpcom.nsIDOMEvent;

public import mozilla.dxpcom.nsIDOMEventD;

public import mozilla.xpcom.nsIDOMNode;

public import mozilla.dxpcom.nsIDOMNodeD;


/* starting wrapper class:    nsIContextMenuListener */
/**
 * An optional interface for embedding clients wishing to receive
 * notifications for context menu events (e.g. generated by
 * a user right-mouse clicking on a link). The embedder implements
 * this interface on the web browser chrome object associated
 * with the window that notifications are required for. When a context
 * menu event, the browser will call this interface if present.
 * 
 * @see nsIDOMNode
 * @see nsIDOMEvent
 *
 * @status FROZEN
 */
class nsIContextMenuListenerD : public nsISupportsD {

  static const nsIID IID = NS_ICONTEXTMENULISTENER_IID;


  alias nsIContextMenuListener InnerType;

  this(nsIContextMenuListener intr){
    super(intr);
    this.inner = intr;
  }

  nsIContextMenuListener opCast() {
    return inner;
  }

  void opAssign(nsIContextMenuListener value) {
    inner = value;
  }

  /** Flag. No context. */
  enum { CONTEXT_NONE = 0U }

  /** Flag. Context is a link element. */
  enum { CONTEXT_LINK = 1U }

  /** Flag. Context is an image element. */
  enum { CONTEXT_IMAGE = 2U }

  /** Flag. Context is the whole document. */
  enum { CONTEXT_DOCUMENT = 4U }

  /** Flag. Context is a text area element. */
  enum { CONTEXT_TEXT = 8U }

  /** Flag. Context is an input element. */
  enum { CONTEXT_INPUT = 16U }

  /**
     * Called when the browser receives a context menu event (e.g. user is right-mouse
     * clicking somewhere on the document). The combination of flags, event and node
     * provided in the call indicate where and what was clicked on.
     *
     * The following table describes what context flags and node combinations are
     * possible.
     *
     * <TABLE>
     * <TR><TD><B>aContextFlag</B></TD><TD>aNode</TD></TR>
     * <TR><TD>CONTEXT_LINK</TD><TD>&lt;A&gt;</TD></TR>
     * <TR><TD>CONTEXT_IMAGE</TD><TD>&lt;IMG&gt;</TD></TR>
     * <TR><TD>CONTEXT_IMAGE | CONTEXT_LINK</TD><TD>&lt;IMG&gt;
     *       with an &lt;A&gt; as an ancestor</TD></TR>
     * <TR><TD>CONTEXT_INPUT</TD><TD>&lt;INPUT&gt;</TD></TR>
     * <TR><TD>CONTEXT_TEXT</TD><TD>&lt;TEXTAREA&gt;</TD></TR>
     * <TR><TD>CONTEXT_DOCUMENT</TD><TD>&lt;HTML&gt;</TD></TR>
     * </TABLE>
     *
     * @param aContextFlags Flags indicating the kind of context.
     * @param aEvent The DOM context menu event.
     * @param aNode The DOM node most relevant to the context.
     *
     * @return <CODE>NS_OK</CODE> always.
     */
  /* void onShowContextMenu (in unsigned long aContextFlags, in nsIDOMEvent aEvent, in nsIDOMNode aNode); */
  void OnShowContextMenu(PRUint32 aContextFlags, nsIDOMEventD aEvent, nsIDOMNodeD aNode){
    nsresult __result = inner.OnShowContextMenu(aContextFlags, aEvent ? cast(nsIDOMEvent)aEvent : null, aNode ? cast(nsIDOMNode)aNode : null);
    CheckException(__result);
  }

private:
  nsIContextMenuListener inner;

}

